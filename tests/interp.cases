# Primitives
2
2
"abc"
abc

# Boolean operators
true and false
false

not false
true

# Simple math
2 + 3
5

3 / 2
1

18 / 6
3

5*6
30

7 + 8 * 4
39

1 - 2 + 3
2

[1, 2] * [[3, 4], [5, 6]]
[13, 16]

[1,2] * [3, 4]
11

[[1, 2], [3, 4]] * [1, 2]
[5, 11]

[[1, 2], [-1, -2]] * [1, -1]
[-1, 1]

# Simple function
() -> 1
λ.1 | {}

# Lambda keyword functions
lambda (x, y, z) x * y + z
λx,y,z.x * y + z | {}

# Let expression
let x = 2; x + 3
5

# Function usage
let f(x) = x*x; f(3)
9

# void -> Z case
let f() = 1; f()
1

# Lists and item retrieval
[1, 2, 3, 4][2]
3

# Tuples
left of (1,2)
1
right of (1,2)
2
let x = (1,2); (right of x, left of x)
(2, 1)

# Dictionary with elements
{x:1,y:2}
{x : 1, y : 2}

# Empty dictionary
{}
{}

# Dictionary reassignment
let A = {x:1, y:2}; A.x = A.y; A
{x : 2, y : 2}


# For loop
let x = 0; for i in [1, 2, 3] x = x + i; x
6

# While loop
let x = 0, i = 1; while i <= 3 { x = x + i; i = i + 1 }; x
6

# Higher order functions
map (x) -> x*x over [1,2,3,4,5]
[1, 4, 9, 16, 25]

fold [1,2,3,4,5] into (x,y) -> x+y from 0
15


# Casting
"123" as Z
123

# Static type checking
3.14 isa Z
false

[1, 2] isa [R]
true

exp(log(5)) equals log(exp(5))
true

# Differential calculus
d/dx (x) -> x
λx.dx/dx | {}

let x = 4; d/dx x*x
8

let f(x) = x; let y = 3; d/dy f(y)
1

let x = [1, 2, 3]; d/dx map (x) -> x*x over x
[[2, 0, 0], [0, 4, 0], [0, 0, 6]]

let x = 3; d/dx fold [1,2,x] into (x,y) -> x*y from 1
2

# ADT cases
type List = Node(Z, ADT<List>) | Empty(); let L = List.Node(1, List.Node(2, List.Node(3, List.Empty()))); switch L in Node(x,l) -> true | Empty() -> false
true

type Num = Int(Z) | Real(R); switch Num.Int(4) in Int(x) -> x | Real(x) -> x
4

type Num = Int(Z) | Real(R); let x = 4; d/dx Num.Real(x)
Num<Real>(1)

type Num = Int(Z) | Real(R); let x = 4; d/dx switch Num.Int(x) in Int(z) -> x*z | Real(z) -> -1
8

# Other cases
let f(x) = { let y = x*x; x + y }; f(4)
20

let factorial(n) = 1 if n < 2 else n * factorial(n-1); factorial(4)
24

exp(log(16)) equals 16
true

import sort; let L = [9,6,8,5,3,2,1,4,7]; sort.quicksort(L); sort.is_sorted(L)
true

import sort; let L = [9,6,8,5,3,2,1,4,7]; sort.mergesort(L); sort.is_sorted(L)
true

let f(x) = [[1], [2], [3], [4]]; let y = [[1, 2], [3, 4], [5, 6]]; d/dy f(y)
[[[[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]]]]

import linalg; let y = [[1, 2], [3, 4], [5, 6]]; d/dy linalg.transpose(y)
[[[[1, 0], [0, 0], [0, 0]], [[0, 0], [1, 0], [0, 0]], [[0, 0], [0, 0], [1, 0]]], [[[0, 1], [0, 0], [0, 0]], [[0, 0], [0, 1], [0, 0]], [[0, 0], [0, 0], [0, 1]]]]


